version: 2.1

parameters:
  PROJECT-NAME:
    type: string
    default: "SMBLibrary"
    
  csproj-file:
    type: string
    default: "SMBLibrary.csproj"

  git-primary-branch:
    type: string
    default: "master"

executors:
  node:
    docker:
      - image: cimg/node:18.9.0

orbs:
  win: circleci/windows@2.2.0

commands:
  nuget-prepare:
    description: "generate nuget.config file to pull in (and publish) nuget dependencies "
    steps:
      - run:
          name: Create local nuget config file
          command: |
            $xml = "<?xml version='1.0' encoding='utf-8'?>
            <configuration>
              <packageSources>
                <add key='github' value='https://nuget.pkg.github.com/Lansweeper/index.json' />
              </packageSources>
              <packageSourceCredentials>
                <github>
                  <add key='Username' value='$GITHUB_USER' />
                  <add key='ClearTextPassword' value='$GITHUB_TOKEN' />
                </github>
              </packageSourceCredentials>
            </configuration>" >> nuget.config

  install-deps:
    description: "Install and cache dependencies"
    steps:
      - restore_cache:
          keys:
            -  << pipeline.parameters.PROJECT-NAME >>-deps-cache-{{ checksum "yarn.lock" }}
            -  << pipeline.parameters.PROJECT-NAME >>-deps-cache- # when lock file changes, use increasingly general patterns to restore cache
      - run:
          name: Install Dependencies
          command: yarn --frozen-lockfile --cache-folder ~/.cache/yarn
      - save_cache:
          key:  << pipeline.parameters.PROJECT-NAME >>-deps-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

jobs:
  build:
    executor: win/default

    steps:
      - checkout
      - nuget-prepare
      - run: dotnet build << pipeline.parameters.PROJECT-NAME >>/<< pipeline.parameters.csproj-file >> --configuration Release

      - persist_to_workspace:
          root: .
          paths:
            - .

  release:
    executor: node
    steps:
      - attach_workspace:
          at: .
      - install-deps
      - run: yarn release
      - persist_to_workspace:
          root: .
          paths:
            - .
            
  publish_nuget_package:
    executor:
      name: win/default
    steps:    
      - attach_workspace:
          at: .
          
      - run:
          name: install jq
          command: apt update && apt install jq -y
          
      - run:
          name: Persist next version to environment
          command: echo "export VERSION=$(cat package.json | jq --raw-output '.version')" >> $BASH_ENV
          
      - run:
          name: Replace nuspec version string with next release
          command: sed -i -E 's/<Version>/<Version>'"$VERSION"'/' ./SMBLibrary/SMBLibrary.csproj      
          
      - run:
          name: Pack the nuget
          command: dotnet pack ./<< pipeline.parameters.PROJECT-NAME >>/<< pipeline.parameters.csproj-file >> --configuration Release

      - run:
          name: Push the nuget
          command: |
              VERSION=$(cat package.json | jq --raw-output '.version')
              dotnet nuget push ./<< pipeline.parameters.PROJECT-NAME >>/bin/Release/<< pipeline.parameters.PROJECT-NAME >>.$VERSION.nupkg --source "github" --api-key $GITHUB_TOKEN

workflows:
  version: 2

  ci_and_release_primary_branch:
    jobs:
      - build:
          context:
            - lec-github-packages-rw
          filters:
            branches:
              only: << pipeline.parameters.git-primary-branch >>
              
      - release:
          requires:
            - build
          context:
            - lec-github-release
            - lec-npm-ro
          filters:
            branches:
              only: << pipeline.parameters.git-primary-branch >>

      - publish_nuget_package:
          requires:
            - release
          context:
            - lec-github-packages-rw
          filters:
            branches:
              only: << pipeline.parameters.git-primary-branch >>
